{
    "docs": [
        {
            "location": "/", 
            "text": "Puzzle\n\n\nVariant Caller GUI and genetic disease analysis tool.\n\n\nOverview\n\n\nPuzzle will look for variant calling resources such as VCF files and \nGEMINI\n databases and visualize their content. It lets you inspect, annotate, and analyze variant calls.\n\n\nPuzzle is not primarily meant to be run as a persistant server but think of it more as an webinterface to quickly spin to visualize your variant calls.\n\n\nWe set out to make \nPuzzle\n both very simple to install as well as intuitive to use. You can be up and running in minutes with minimal prerequisites.\n\n\nWhen puzzle is installed, in its simplest form it will try to visualize the VCF files in the directory you point to with\n\n\npuzzle tests/ view\n\n\n\n\nTry it!\n\n\nAnnotations\n\n\nPuzzle will work best if the variants are annotated with \nVEP\n, and some additional annotations such as 1000G frequencies and CADD scores.\n\n\nGemini support\n\n\nIf gemini is installed, the user can visualize a gemini database by running\n\n\npuzzle path/to/geminidatabase.db --plugin gemini view\n\n\n\n\nRight now it will only work well with databases that includes one family.\n\n\nDeveloping Puzzle\n\n\nPuzzle is a Python Flask app with a command line interface. It can work with multiple backends using plugins; raw VCFs, GEMINI, MongoDB.\n\n\nAnyone can help make this project better - read \nCONTRIBUTING\n to get started!", 
            "title": "Home"
        }, 
        {
            "location": "/#puzzle", 
            "text": "Variant Caller GUI and genetic disease analysis tool.", 
            "title": "Puzzle"
        }, 
        {
            "location": "/#overview", 
            "text": "Puzzle will look for variant calling resources such as VCF files and  GEMINI  databases and visualize their content. It lets you inspect, annotate, and analyze variant calls.  Puzzle is not primarily meant to be run as a persistant server but think of it more as an webinterface to quickly spin to visualize your variant calls.  We set out to make  Puzzle  both very simple to install as well as intuitive to use. You can be up and running in minutes with minimal prerequisites.  When puzzle is installed, in its simplest form it will try to visualize the VCF files in the directory you point to with  puzzle tests/ view  Try it!  Annotations  Puzzle will work best if the variants are annotated with  VEP , and some additional annotations such as 1000G frequencies and CADD scores.  Gemini support  If gemini is installed, the user can visualize a gemini database by running  puzzle path/to/geminidatabase.db --plugin gemini view  Right now it will only work well with databases that includes one family.", 
            "title": "Overview"
        }, 
        {
            "location": "/#developing-puzzle", 
            "text": "Puzzle is a Python Flask app with a command line interface. It can work with multiple backends using plugins; raw VCFs, GEMINI, MongoDB.  Anyone can help make this project better - read  CONTRIBUTING  to get started!", 
            "title": "Developing Puzzle"
        }, 
        {
            "location": "/about/contributing/", 
            "text": "Contributing\n\n\nAll contributions are much welcome and greatly appreciated! Expect to be credited for you effort.\n\n\nThis document is adapted from the cookiecutter \nCONTRIBUTING.rst\n.\n\n\nGeneral\n\n\nGenerally try to limit the scope of any Pull Request to an atomic update if possible. This way, it's much easier to assess and review your changes.\n\n\nYou should expect a considerably faster turn around if you submit two or more PRs instead of baking them all into one major PR.\n\n\nIssue tracker\n\n\npuzzle uses the excellent \nGitHub issue tracker\n.\n\n\nPersonally, I also recommend giving \nZenHub\n a try. After installing the Google Chrome plugin, visit the \npuzzle boards\n. This way, it's very easy to get an overview of the current bug/feature request situation.\n\n\nTypes of Contributions\n\n\nThere are many ways you can help out and improve this repository.\n\n\nReport Bugs\n\n\nReport bugs at \nrobinandeer/puzzle/issues\n.\n\n\nConsider including the following data in your bug report:\n\n\n\n\nYour operating system name and version\n\n\nAny details about your local setup that might be helpful in troubleshooting\n\n\nIf you can, provide detailed steps to reproduce the bug\n\n\nIf you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.\n\n\n\n\nFix Bugs\n\n\nLook through the \nGitHub issues\n for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. A good idea is also to review the comment thread to see if the issue is already referenced in any open pull requests.\n\n\nImplement Features\n\n\nLook through the \nGitHub issues\n for features. Anything tagged with \"feature\" is open to whoever wants to implement it.\n\n\nWrite Documentation\n\n\nPuzzle could always use more documentation, whether as part of the official Puzzle docs, in inline docstrings, or even on the web in blog posts, articles, and such.\n\n\nIf you have written your own tutorial or review of the software, please consider adding a refferal link to the repository.\n\n\nSubmit Feedback\n\n\nThe best way to send feedback is to \nopen a new issue\n.\n\n\nIf you are requesting a feature:\n\n\n\n\nExplain in detail how it would work\n\n\nKeep the scope as narrow as possible, to make it easier to implement (atomic)\n\n\n\n\nGet Started!\n\n\nReady to contribute? Here's how to set up \nPuzzle\n for local development.\n\n\n\n\nOver time my ambition is to provide a reproducable and automated setup through Vagrant.\n\n\n\n\n\n\n\n\nFork the \nrobinandeer/puzzle\n repo on GitHub\n\n\n\n\n\n\nClone your fork locally:\n\n\n\n\n\n\nbash\n  $ git clone git@github.com:\nyour github username\n/puzzle.git\n\n\nI would personally recommend \nGitHub for Mac\n to easily manage pull requests and \nSourceTree\n as an excellent GUI for git.\n\n\n\n\nInstall your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:\n\n\n\n\nbash\n  $ mkvirtualenv puzzle\n  $ cd puzzle/\n  $ pip install --editable .\n\n\n\n\nCreate a branch for local development:\n\n\n\n\nbash\n  $ git checkout -b name-of-your-bugfix-or-feature\n\n\n\n\n\n\nMake you changes locally\n\n\n\n\n\n\nWhen you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:\n\n\n\n\n\n\nbash\n  $ flake8 puzzle tests\n  $ invoke test\n  $ tox\n\n\nTo get flake8 and tox, just pip install them into your virtualenv.\n\n\n\n\nCommit your changes and push your branch to GitHub:\n\n\n\n\nbash\n  $ git add .\n  $ git commit -m \"Detailed description of your changes.\"\n  $ git push origin name-of-your-bugfix-or-feature\n\n\n\n\n\n\nCheck that the test coverage hasn't dropped:\n\n\nbash\n$ invoke coverage\n\n\n\n\n\n\nSubmit a pull request through the GitHub website. I would encourage you to submit your pull request early in the process. This makes it easier to maintain an overview of current development and opens up for continous discussion.\n\n\n\n\n\n\nPull Request Guidelines\n\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n\n\n\n\n\nThe pull request should include tests.\n\n\n\n\n\n\nIf the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.\n\n\n\n\n\n\nThe pull request should work for Python 2.7, 3.4, and PyPy. Check the \nTravis page\n and make sure that the tests pass for all supported Python versions.\n\n\n\n\n\n\nCoding conventions\n\n\nGenerally I recommend two ways to stay up-to-date on puzzle coding standards.\n\n\n\n\n\n\nRead and pay attention to current code in the repository\n\n\n\n\n\n\nInstall a plugin for \nEditorConfig\n and let it handle some of the detailed settings for you.\n\n\n\n\n\n\nTips\n\n\nTo run a particular test:\n\n\n$ python -m pytest tests.test_find.TestFind.test_find_template\n\n\n\n\nTo run a subset of tests:\n\n\n$ python -m pytest tests.test_find", 
            "title": "Contributing"
        }, 
        {
            "location": "/about/contributing/#contributing", 
            "text": "All contributions are much welcome and greatly appreciated! Expect to be credited for you effort.  This document is adapted from the cookiecutter  CONTRIBUTING.rst .", 
            "title": "Contributing"
        }, 
        {
            "location": "/about/contributing/#general", 
            "text": "Generally try to limit the scope of any Pull Request to an atomic update if possible. This way, it's much easier to assess and review your changes.  You should expect a considerably faster turn around if you submit two or more PRs instead of baking them all into one major PR.", 
            "title": "General"
        }, 
        {
            "location": "/about/contributing/#issue-tracker", 
            "text": "puzzle uses the excellent  GitHub issue tracker .  Personally, I also recommend giving  ZenHub  a try. After installing the Google Chrome plugin, visit the  puzzle boards . This way, it's very easy to get an overview of the current bug/feature request situation.", 
            "title": "Issue tracker"
        }, 
        {
            "location": "/about/contributing/#types-of-contributions", 
            "text": "There are many ways you can help out and improve this repository.  Report Bugs  Report bugs at  robinandeer/puzzle/issues .  Consider including the following data in your bug report:   Your operating system name and version  Any details about your local setup that might be helpful in troubleshooting  If you can, provide detailed steps to reproduce the bug  If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.   Fix Bugs  Look through the  GitHub issues  for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. A good idea is also to review the comment thread to see if the issue is already referenced in any open pull requests.  Implement Features  Look through the  GitHub issues  for features. Anything tagged with \"feature\" is open to whoever wants to implement it.  Write Documentation  Puzzle could always use more documentation, whether as part of the official Puzzle docs, in inline docstrings, or even on the web in blog posts, articles, and such.  If you have written your own tutorial or review of the software, please consider adding a refferal link to the repository.  Submit Feedback  The best way to send feedback is to  open a new issue .  If you are requesting a feature:   Explain in detail how it would work  Keep the scope as narrow as possible, to make it easier to implement (atomic)", 
            "title": "Types of Contributions"
        }, 
        {
            "location": "/about/contributing/#get-started", 
            "text": "Ready to contribute? Here's how to set up  Puzzle  for local development.   Over time my ambition is to provide a reproducable and automated setup through Vagrant.     Fork the  robinandeer/puzzle  repo on GitHub    Clone your fork locally:    bash\n  $ git clone git@github.com: your github username /puzzle.git  I would personally recommend  GitHub for Mac  to easily manage pull requests and  SourceTree  as an excellent GUI for git.   Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:   bash\n  $ mkvirtualenv puzzle\n  $ cd puzzle/\n  $ pip install --editable .   Create a branch for local development:   bash\n  $ git checkout -b name-of-your-bugfix-or-feature    Make you changes locally    When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:    bash\n  $ flake8 puzzle tests\n  $ invoke test\n  $ tox  To get flake8 and tox, just pip install them into your virtualenv.   Commit your changes and push your branch to GitHub:   bash\n  $ git add .\n  $ git commit -m \"Detailed description of your changes.\"\n  $ git push origin name-of-your-bugfix-or-feature    Check that the test coverage hasn't dropped:  bash\n$ invoke coverage    Submit a pull request through the GitHub website. I would encourage you to submit your pull request early in the process. This makes it easier to maintain an overview of current development and opens up for continous discussion.", 
            "title": "Get Started!"
        }, 
        {
            "location": "/about/contributing/#pull-request-guidelines", 
            "text": "Before you submit a pull request, check that it meets these guidelines:    The pull request should include tests.    If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.    The pull request should work for Python 2.7, 3.4, and PyPy. Check the  Travis page  and make sure that the tests pass for all supported Python versions.", 
            "title": "Pull Request Guidelines"
        }, 
        {
            "location": "/about/contributing/#coding-conventions", 
            "text": "Generally I recommend two ways to stay up-to-date on puzzle coding standards.    Read and pay attention to current code in the repository    Install a plugin for  EditorConfig  and let it handle some of the detailed settings for you.", 
            "title": "Coding conventions"
        }, 
        {
            "location": "/about/contributing/#tips", 
            "text": "To run a particular test:  $ python -m pytest tests.test_find.TestFind.test_find_template  To run a subset of tests:  $ python -m pytest tests.test_find", 
            "title": "Tips"
        }
    ]
}